from telethon import TelegramClient, events, Button as button
from telethon.tl.types import InputMediaContact
import sqlite3
from os import getenv
from random import choice


api_id = getenv("api_id")
api_hash = getenv("api_hash")
bot_token = getenv("bot_token")


client = TelegramClient('bot_session', api_id, api_hash).start(bot_token=bot_token)


@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    reply_buttons = [
        [button.text("Co—Ü-–º–µ—Ä–µ–∂–∏", resize=True)],
        [button.text("–ê–¥—Ä–µ—Å–∏", resize=True)],
        [button.text("–ü—Ä–∞–π—Å-–ª—ñ—Å—Ç", resize=True)],
        [button.text("–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ—Ä–∞–¥–∞", resize=True)],
        [button.text("–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", resize=True)]
    ]
    await event.respond("–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç Rio Fitness Club ü§ñ", buttons = reply_buttons)

@client.on(events.NewMessage(pattern="Co—Ü-–º–µ—Ä–µ–∂–∏"))
async def send_social_networks(event):
    all_social_networks = [
                [button.inline("–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º", b"instagram")],
                [button.inline("–§–µ–π—Å–±—É–∫", b"facebook")],
                [button.inline("–¢—ñ–∫-–¢–æ–∫", b"tiktok")]
    ]
    await event.respond("–¢—ñ–ª—å–∫–∏ –ø—ñ–¥–ø–∏—à–∏—Å—å ü•á",buttons = all_social_networks)

@client.on(events.CallbackQuery)
async def enter_social_link(event):
    if event.data == b"instagram":
        await event.respond("–û—Å—å –≤—Å—ñ –Ω–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º ->")
        rio_fitness_btn = [button.url("–ö–ª—ñ–∫", "https://www.instagram.com/rio_fitness_club")]
        await event.respond("–ù–∞—à –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º", buttons = rio_fitness_btn)
        rio_school_btn = [button.url("–ö–ª—ñ–∫", "https://www.instagram.com/rioschool")]
        await event.respond("–¢–∞–∫–æ–∂ –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—à–æ—ó rioschool", buttons=rio_school_btn)

    elif event.data == b"facebook":
        await event.respond("–ù–∞—à Facebook")
        rio_facebook_btn = [button.url("–ñ–º–∞–∫", "https://www.facebook.com/FitnessRioClub")]
        await event.respond("–ó–∞–ª—ñ—Ç–∞–π ->", buttons = rio_facebook_btn)

    elif event.data == b"tiktok":
        await event.respond("Tik - Tok –∞–∫–∞—É–Ω—Ç")
        rio_tiktok_btn = [button.url("–ù–∞–∂–º–∏ –º–µ–Ω–µ", "https://www.tiktok.com/@rio_fitness_club0")]
        await event.respond("–ü–æ–≥—Ä–æ—Ç–∞–π –ù–∞—à –¢—ñ–∫-–¢–æ–∫", buttons = rio_tiktok_btn)



@client.on(events.NewMessage(pattern="–ê–¥—Ä–µ—Å–∏"))
async def send_addresses(event):
    all_addresses = [
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 1", b"rio_1")],
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 2", b"rio_2")],
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 3", b"rio_3")],
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 4", b"rio_4")],
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 5", b"rio_5")],
        [button.inline("–†—ñ–æ –§—ñ—Ç–Ω–µ—Å - 6", b"rio_6")]
    ]
    await event.respond("–í–∏–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –∞–¥—Ä–µ—Å—É: ", buttons = all_addresses)




@client.on(events.CallbackQuery)
async def enter_data_club(event):
    if event.data == b'rio_1':
        await event.respond("‚Ä¢ Rio Fitness Club ‚Ññ1\n‚Ä¢–ê–¥—Ä–µ—Å–∞ - –≤—É–ª–∏—Ü—è –ö–æ—Å–º–æ–Ω–∞–≤—Ç—ñ–≤, 62/2, –û–¥–µ—Å–∞\n‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ü–Ω - –°–± : 08.00 : 22.00 ; –ù–¥ - –≤–∏—Ö—ñ–¥–Ω–∏–π\n" + "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Ä +380639658039")
    if event.data == b'rio_2':
        await event.respond("‚Ä¢ Rio Fitness Club ‚Ññ2\n‚Ä¢ –ê–¥—Ä–µ—Å–∞ - –≤—É–ª–∏—Ü—è –ê–∫–∞–¥–µ–º—ñ–∫–∞ –ö–æ—Ä–æ–ª—å–æ–≤–∞, 7, –û–¥–µ—Å–∞\n‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ü–Ω - –°–± : 08.00 : 22.00 ; –ù–¥ - 11.00 : 16.00\n" + "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Ä +380954424913")
    if event.data == b'rio_3':
        await event.respond("‚Ä¢ Rio Fitness Club ‚Ññ3\n‚Ä¢–ê–¥—Ä–µ—Å–∞ - –≤—É–ª–∏—Ü—è –†–∞–¥—ñ—Å–Ω–∞ –≤—É–ª–∏—Ü—è, 15, –û–¥–µ—Å–∞\n‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ü–Ω - –°–± : 08.00 : 22.00 ; –ù–¥ - –≤–∏—Ö—ñ–¥–Ω–∏–π\n" + "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Ä +380639962059")
    if event.data == b'rio_4':
        await event.respond("‚Ä¢ Rio Fitness Club ‚Ññ4\n‚Ä¢–ê–¥—Ä–µ—Å–∞ - –≤—É–ª–∏—Ü—è –°–µ–º–µ–Ω–∞ –ü–∞–ª—ñ—è, 93–ê, –û–¥–µ—Å–∞\n‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ü–Ω - –°–± : 08.00 : 22.00 ; –ù–¥ - 11.00 : 16.00\n" + "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Ä +380937505878")
    if event.data == b'rio_5':
        await event.respond("‚Ä¢ Rio Fitness Club ‚Ññ5\n‚Ä¢–ê–¥—Ä–µ—Å–∞ - –≤—É–ª–∏—Ü—è –¢–æ—Ä–≥–æ–≤–∞ 2 —Å/2—à-2, –ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n‚Ä¢ –†–æ–∑–∫–ª–∞–¥ –ü–Ω - –°–± : 08.00 : 22.00 ; –ù–¥ - 11.00 : 16.00\n" + "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Ä +380637437500")
    if event.data == b'rio_6':
        await event.respond("–°–∫–æ—Ä–æ!\n–ù–∞—Ä–∞–∑—ñ Rio Fitness Club ‚Ññ6 –ø–µ—Ä–µ–±—É–≤–∞—î —É —Å—Ç–∞–¥—ñ—ó –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞.")



@client.on(events.NewMessage(pattern="–ü—Ä–∞–π—Å-–ª—ñ—Å—Ç"))
async def send_price_list(event):
    
    await event.respond('''
‚Ä¢ –ü–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - 0 –≥—Ä–Ω
‚Ä¢ 400–≥—Ä–Ω (–¥–æ 15 —Ä–æ–∫—ñ–≤) - –º—ñ—Å—è—Ü—å
‚Ä¢ 580–≥—Ä–Ω –ø—ñ—Å–ª—è 15 - –º—ñ—Å—è—Ü—å
‚Ä¢ 1400 –ø—ñ—Å–ª—è 15 —Ä–æ–∫—ñ–≤ –∑–∞ 3 –º—ñ—Å—è—Ü—ñ
‚Ä¢ 2550–≥—Ä–Ω –∑ —Ç—Ä–µ–Ω–µ—Ä–æ–º - –º—ñ—Å—è—Ü—å
''')

tips = ["–†–æ–∑–º–∏–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º", "–ü–∏–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏", "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ç–µ—Ö–Ω—ñ–∫–æ—é –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–ø—Ä–∞–≤", "–ü–æ—Å—Ç—É–ø–æ–≤–æ –∑–±—ñ–ª—å—à—É–π—Ç–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –≤–ø—Ä–∞–≤–∏", "–°–ª—É—Ö–∞–π—Ç–µ —Å–≤–æ—î —Ç—ñ–ª–æ", "–ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "–í—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ –º—ñ–∂ –ø—ñ–¥—Ö–æ–¥–∞–º–∏", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–ª–µ–∂–Ω–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –¥–∏—Ö–∞–Ω–Ω—è–º", "–¢—Ä–µ–Ω—É–π—Ç–µ –≤—Å—ñ –≥—Ä—É–ø–∏ –º'—è–∑—ñ–≤", "–ó–∞–ø–∏—Å—É–π—Ç–µ —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", "–ó–∞–π–º–∞–π—Ç–µ—Å—è –∑ —Ç—Ä–µ–Ω–µ—Ä–æ–º", "–†–æ–±—ñ—Ç—å —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥", "–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø—Ä–æ –∫–∞—Ä–¥—ñ–æ", "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –ø–æ—Å—Ç–∞–≤–æ—é", "–ü–ª–∞–Ω—É–π—Ç–µ —Å–≤–æ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "–í—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ", "–ù–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ—Å—è", "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–∫—Å–µ—Å—É–∞—Ä–∏", "–ö–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ –≤–∞–≥—É","–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Å–≤–æ—ó–º —Å—Ç–∞–Ω–æ–º –∑–¥–æ—Ä–æ–≤'—è", "–ú–æ—Ç–∏–≤—É–π—Ç–µ —Å–µ–±–µ", "–ó–∞–ª—É—á–∞–π—Ç–µ –¥—Ä—É–∑—ñ–≤", "–ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—è –ø—Ä–æ—Ü–µ—Å–æ–º"]

@client.on(events.NewMessage(pattern="–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ—Ä–∞–¥–∞"))
async def send_tip(event):
    recomend_tip = choice(tips)
    tip_btn = [
        button.inline("–©–µ –ø–æ—Ä–∞–¥–∞!", b'next_tip')
    ]
    await event.respond(f"–í–∞—à–∞ –ø–æ—Ä–∞–¥–∞ - {recomend_tip}", buttons=tip_btn)

@client.on(events.CallbackQuery(pattern=b"next_tip"))
async def tip_answer(event):
    recomend_tip = choice(tips)
    tip_btn = [
        button.inline("–©–µ –ø–æ—Ä–∞–¥–∞!", b'next_tip')
    ]
    await event.edit(f"–í–∞—à–∞ –ø–æ—Ä–∞–¥–∞ - {recomend_tip}", buttons=tip_btn)


@client.on(events.NewMessage(pattern="–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"))
async def faq(event):
    await event.respond(
        "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è",
        buttons=[
            [button.inline("–©–æ –≤–∑—è—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", b"workout_gear")],
            [button.inline("–Ø–∫–∞ —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –Ω–æ–≤–∞—á–∫–∞?", b'training_frequency')],
            [button.inline("–Ø–∫—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏ –≤–∏ –Ω–∞–¥–∞—î—Ç–µ?", b"other_services")]
        ]
    )

@client.on(events.CallbackQuery)
async def answer_faq(event):
    if event.data == b"workout_gear":
        await event.respond('''
**–°–ø–∏—Å–æ–∫ —Ä–µ—á–µ–π —è–∫—ñ –≤–∞—Ä—Ç–æ –≤–∑—è—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è**
‚Ä¢ –ó–º—ñ–Ω–Ω–µ –≤–∑—É—Ç—Ç—è - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ –∫—Ä–æ—Å—ñ–≤–∫–∏ —á–∏ –∫–µ–¥–∏
‚Ä¢ –í–æ–¥–∞ - –Ω–µ —Ç—Ä–µ–±–∞ –±—ñ–ª—å—à–µ 0.75–ª
‚Ä¢ –†—É—à–Ω–∏–∫ - —á–∏—Å—Ç–æ—Ç–∞ –∑–∞–ª—É —Ç–∞ –æ—Å–æ–±–∏—Å—Ç–∞ –≥—ñ–≥—ñ—î–Ω–∞
‚Ä¢ –ó–º—ñ–Ω–Ω–∞ –æ–¥–µ–∂–∞ - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç–∏ –∑–º—ñ–Ω–Ω–∏–π –æ–¥—è–≥ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è 
–ó —Ü–∏–º —Å–ø–∏—Å–∫–æ–º —Ä–µ—á–µ–π –≤–∏ –±—É–¥–µ—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ø–æ—á—É–≤–∞—Ç–∏ —Å–µ–±–µ —É —Å–ø–æ—Ä—Ç-–∑–∞–ª—ñ
–ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—ñ–≤ üèÜ                        
''')
    if event.data == b"training_frequency":
        await event.respond("–î–ª—è –Ω–æ–≤–∞—á–∫–∞ 2 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –±—É–¥–µ –Ω–µ–ø–æ–≥–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.\n–Ø–∫—â–æ –≤–∏ –≤–∂–µ –±—ñ–ª—å—à –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É —Ä—ñ–≤–Ω—ñ ‚Äî 3 —Ä–∞–∑–∏.\n4 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å, —è–∫—â–æ –≤–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –≤–∏—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —ñ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∞–±–æ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ—é —Ñ—ñ–∑–∏—á–Ω—É —Ñ–æ—Ä–º—É.")
    if event.data == b'other_services':
        await event.respond("–û–∫—Ä—ñ–º —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞–º -\n- –ì—Ä—É–ø–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è —Å—Ç—Ä–µ—á—ñ–Ω–≥–æ–º\n- –ú–∞—Å–∞–∂–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n- –ü—Ä–æ–±—ñ–∂–∫–∏ —É –≥—Ä—É–ø–∞—Ö")

async def main():
    await client.start()
    await client.run_until_disconnected()

if __name__ == '__main__':
    client.loop.run_until_complete(main())
